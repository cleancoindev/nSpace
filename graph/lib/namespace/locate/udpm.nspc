%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%								UDPM.NSPC
%
%				UDP multicast namespace locator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@

	% Context
	$	IdThis				Misc.Dist {}		% Id of this namespace

	% Actions
	$	Initialize			Misc.Dist {}		% Initialize
	$	Uninitialize		Misc.Dist {}		% Uninitialize
	$	Start					Misc.Dist {}		% Start discovery
	$	Stop					Misc.Dist {}		% Stop discovery

	% Notifications
	$	OnAddress			Misc.Dist {}		% Active source address

	% DEBUG
	$	Debug Misc.Debug {}
%		!	Initialize/OnFire						Debug/Fire
%		!  Start/OnFire                     Debug/Fire
%		!	IdThis/OnFire							Debug/Fire

	%%%%%%%%
	% Setup
	%%%%%%%%

	% Subgraph: State
	#	State											State/Namespace/Locate/Udpm/ {}

	% Subgraph: Locator interface
	#	Interface									State/Namespace/Locate/Interface/ {}
		!	Interface/IdThis/Element/Default/Value/OnFire
														IdThis/Fire

	% Subgraph: Interface management
	#	IntfLocs										Lib/Interface/Dict/ {}

	% MISCN: Location of dictionary to manage
	$	ValueIntfLocs Misc.Dist { Value "./Interface/Locations/" }
		!	Initialize/OnFire						ValueIntfLocs/Fire
		!	ValueIntfLocs/OnFire					IntfLocs/Location/Fire

	%%%%%%%%%%
	% Network
	%%%%%%%%%%

	% Subgraph: Multicast support for discovery
	#	Multicast									Lib/Comm/Network/Ip/Multicast/ {}
		!	Multicast/OnAddress/OnFire			OnAddress/Fire

	% Subgraph: Network interfaces
	#	Intfs											Lib/Comm/Network/IntfWatch/ {}
		!	Start/OnFire							Intfs/Start/Fire
		!	Stop/OnFire								Intfs/Stop/Fire

	% Add/remove interfaces to/from multicast
	!	Intfs/OnAdd/OnFire						Multicast/AddressIntf/Fire
	!	Intfs/OnAdd/OnFire						Multicast/Add/Fire
	!	Intfs/OnRemove/OnFire					Multicast/AddressIntf/Fire
	!	Intfs/OnRemove/OnFire					Multicast/Remove/Fire

	% MISCN: Create binary parser	for persistence
	$	CreatePrsr Misc.Create { Id IO.StmPrsBin } 
		!	Initialize/OnFire						CreatePrsr/Fire

	% MISCN: Create dictionary for pending discoveries
	$	CreatePendDct Misc.Create { Id Adt.Dictionary }
		!	Initialize/OnFire						CreatePendDct/Fire

   %% NOTE: Does this belong here ?
   %% Usage of this discovery graph implies use of the TCP namespace server.
   %% Outgoing discovery messages use the same port as the TCP server so the
   %% destiation knows how to contact the server.  Route port to this graph.
   !  /Lib/Comm/Network/Ip/Tcp/Server/Inst/Namespace/State/PortSrvr/OnFire
                                          State/PortNspc/Fire

	%%%%%%%%%%%
	% Transmit
	%%%%%%%%%%%

	% DEBUG
	$	DebugTx Misc.Debug {}
	$	DebugBr Misc.Debug {}

	% MISCN: Transmit/broadcast a message
	$	Transmit		Misc.Dist {}
%		!	Transmit/OnFire						DebugTx/Fire
	$	Broadcast	Misc.Dist {}
%		!	Broadcast/OnFire						DebugBr/Fire

	% MISCN: Create stream to receive value
	$	CreateStm Misc.Create { Id IO.StmMemory }

	% ION: Persist value to stream
	$	PersistTo IO.Persist {}
		!	CreatePrsr/OnFire						PersistTo/Parser
		!	Transmit/OnFire						PersistTo/Value
		!	Broadcast/OnFire						PersistTo/Value
		!	CreateStm/OnFire						PersistTo/Stream
		!	CreateStm/OnFire						PersistTo/Save
%		!	PersistTo/Save							Debug/Fire

	% MISCN: Reset stream position
	$	StmPosTx Io.StreamOp { Offset 0:int Origin Set }
		!	PersistTo/OnSave						StmPosTx/Seek

	% Datagram
	!	PersistTo/OnSave							Multicast/Stream/Fire

	% Transmit
	!	Transmit/OnFire							CreateStm/Fire
	!	Broadcast/OnFire							CreateStm/Fire
	!	Transmit/OnFire							Multicast/Transmit/Fire
	!	Broadcast/OnFire							Multicast/Broadcast/Fire

	% MISCN: Response address for last received message
	$	ValueAddrResp Misc.Dist {}
		!	OnAddress/OnFire						ValueAddrResp/Value
		!	ValueAddrResp/OnFire					Multicast/Address/Fire

	%%%%%%%%%%
	% Receive
	%%%%%%%%%%

	% DEBUG
	$	DebugRx Misc.Debug {}

	% ION: Persist value from datagram stream
	$	PersistFrom IO.Persist {}
		!	CreatePrsr/OnFire						PersistFrom/Parser
		!	Multicast/OnStream/OnFire			PersistFrom/Stream
		!	Multicast/OnStream/OnFire			PersistFrom/Load
%		!	PersistFrom/OnLoad					DebugRx/Fire

	% MISCN: Process message
	$	DemuxVerb Misc.Demux { Key Verb Values ( Arrive Depart ) }
		!	PersistFrom/OnLoad					DemuxVerb/Dictionary
		!	PersistFrom/OnLoad					DemuxVerb/Fire

	%%%%%%%%%%%
	% Announce
	%%%%%%%%%%%

	%% Announce this namespace on/off network.

	% MISCN: Verb to announce arrival
	$	VerbArrive Misc.Dist { Value { Verb Arrive } }
	$	VerbDepart Misc.Dist { Value { Verb Depart } }
		!	Stop/OnFire								VerbDepart/Fire

	% ADTN: Store namespace Id in message
	$	StoreAnnId Adt.Store { Key Id Value "" }
		!	VerbArrive/OnFire						StoreAnnId/Dictionary
		!	VerbArrive/OnFire						StoreAnnId/Fire
		!	VerbDepart/OnFire						StoreAnnId/Dictionary
		!	VerbDepart/OnFire						StoreAnnId/Fire
		!	IdThis/OnFire							StoreAnnId/Value

	%% Another namespace is announcing its arrival on the network
	%% For unknown namespaces, send back an arrival message for this namespace.

	% MATHN: Convert address into connection string
	$	AppendAddrConn Math.Binary { Left "tcp:" }
		!	OnAddress/OnFire						AppendAddrConn/Right
		!	DemuxVerb/OnArrive					AppendAddrConn/Fire
		!	DemuxVerb/OnDepart					AppendAddrConn/Fire

	% ADTN: Load the Id of the remote namespace
	$	LoadArriveId Adt.Load { Key Id }
		!	DemuxVerb/OnArrive					LoadArriveId/Dictionary
		!	DemuxVerb/OnArrive					LoadArriveId/Fire

	% ADTN: Already know about Id ?
	$	LoadIdChk Adt.Load {}
		!	IntfLocs/OnRoot/OnFire				LoadIdChk/Dictionary
		!	LoadArriveId/OnFire					LoadIdChk/Key
		!	LoadArriveId/OnFire					LoadIdChk/Fire

	% MISCN: Match address ?
	$	ArriveMatch Misc.Compare { Left "" }
		!	AppendAddrConn/OnFire				ArriveMatch/Left
		!	LoadIdChk/OnFire						ArriveMatch/Fire

	% MISCN: Arrive response
	$	ValueAnnResp Misc.Dist {}
		!	StoreAnnId/OnFire						ValueAnnResp/Value

	% Set response address and transmit this arrival
	!	ValueAnnResp/OnFire						ValueAddrResp/Fire
	!	ValueAnnResp/OnFire						Transmit/Fire

	% Announce self to new namespace
	!	LoadIdChk/OnNotFound						ValueAnnResp/Fire
	!	ArriveMatch/OnNotEqual					ValueAnnResp/Fire

	%% Latent connections

	% Announce arrival
%	!	StoreAnnId/OnFire							Debug/Fire
	!	StoreAnnId/OnFire							Broadcast/Fire

	% Announce arrival on start
%	!	IdThis/OnFire								VerbArrive/Fire
	!	Start/OnFire								VerbArrive/Fire

	%%%%%%%%%
	% Depart
	%%%%%%%%%

	% ADTN: Load the Id of the remote namespace
	$	LoadDepartId Adt.Load { Key Id }
		!	DemuxVerb/OnDepart					LoadDepartId/Dictionary
		!	DemuxVerb/OnDepart					LoadDepartId/Fire

	%%%%%%%%%%%%
	% Locations
	%%%%%%%%%%%%

	%% Update locations interface as namespaces arrive and depart.

	% Namespace Id as key
	!	LoadArriveId/OnFire						IntfLocs/Key/Fire
	!	LoadDepartId/OnFire						IntfLocs/Key/Fire

	% Store/remove connection
%	!	AppendAddrConn/OnFire					Debug/Fire
	!	AppendAddrConn/OnFire					IntfLocs/Value/Fire
	!	DemuxVerb/OnArrive						IntfLocs/Store/Fire
%	!	DemuxVerb/OnDepart						IntfLocs/Remove/Fire

	%%%%%%%%%%
	% Startup
	%%%%%%%%%%

	% Start discovery process.
	% NOTE: If the nSpace port is not retrieved from the TCP/IP server
	% auto-startup may not be possible due to invalid port.

   % MISCN: Valid port ?
   $  IsPort Misc.Compare { Left 0:int }
      !  State/PortNspc/OnFire            IsPort/Right
		!	Interface/~Link/OnFire				IsPort/Fire

	% MISCN: Multicast address
	$	ValueAddressMulti Misc.Dist {}
      !  State/AddressMulti/OnFire        ValueAddressMulti/Value
		!	ValueAddressMulti/OnFire			Multicast/AddressMulti/Fire

	% Start discovery
	!	IsPort/OnNotEqual							Multicast/PortLocal/Fire
	!	IsPort/OnNotEqual							ValueAddressMulti/Fire
%	!	IsPort/OnNotEqual							Start/Fire

	% MISCN: Debug
	$	Timer Misc.Timer { Rate 5000:int }
		!	IsPort/OnNotEqual						Timer/Start
		!	Timer/OnFire							Timer/Stop
		!	Timer/OnFire							Start/Fire

	%%%%%%%%%%%
	% Shutdown
	%%%%%%%%%%%

	%% Remove discovered namespaces

	% Stop discovery on shutdown
	!	Uninitialize/OnFire						Stop/Fire
