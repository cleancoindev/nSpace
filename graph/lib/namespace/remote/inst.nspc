%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%								INST.NSPC
%
%		A remote server implementation for load/store/listen
%		capability over any client interface.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@

	% Context

	% Actions
	$	Initialize			Misc.Dist {}		% Initialize
	$	Uninitialize		Misc.Dist {}		% Uninitialize

	% Notifications
	$	OnReceive			Misc.Dist {}		% Value received
	$	OnClose				Misc.Dist {}		% Client closing
	$	OnConnection		Misc.Dist {}		% Current connection
	$	OnLocation			Misc.Dist {}		% Current location
	$	OnValue				Misc.Dist {}		% Current value

	% DEBUG
	$	Debug Misc.Debug {}
		!	Initialize/OnFire						Debug/Fire

	%%%%%%%%
	% Setup
	%%%%%%%%

	% Subgraph: State for this instance
%	#	State											State/Namespace/Remote/State/ {}

	% MISCN: Create dictionary to keep track of listened locations vs. clients
	$	CreateListensDct Misc.Create { Id Adt.Dictionary }
		!	Initialize/OnFire						CreateListensDct/Fire

	%%%%%%%%%%
	% Servers
	%%%%%%%%%%

	%% TOOD: Dynamically added servers

	% Subgraph: Websocket server
	#	Ws												Lib/Namespace/Remote/Ws/Inst/ {}
		!	Ws/State/OnClose/OnFire				OnClose/Fire

	%%%%%%%%%%
	% Receive
	%%%%%%%%%%

	% Subgraph: Asynchronous queue for received messages
	#	RxQ											Lib/Sync_Value_QA/ {}
		!	Ws/State/OnValue/OnFire				RxQ/Value/Fire
		!	RxQ/OnValue/OnFire					OnReceive/Fire
		!	RxQ/OnValue/OnFire					RxQ/Next/Fire

	% Subgraph: Process received messages asynchronously

	% ADTN: Load the active connection string
	$	LoadConnRx Adt.Load { Key Connection }
		!	OnReceive/OnFire						LoadConnRx/Dictionary
		!	OnReceive/OnFire						LoadConnRx/Fire
		!	LoadConnRx/OnFire						OnConnection/Fire

	% ADTN: Load the received value
	$	LoadValRx Adt.Load { Key Value }
		!	OnReceive/OnFire						LoadValRx/Dictionary
		!	OnReceive/OnFire						LoadValRx/Fire

	% ADTN: Load location if specified
	$	LoadLocationRx Adt.Load { Key Location }
		!	LoadValRx/OnFire						LoadLocationRx/Dictionary
		!	LoadValRx/OnFire						LoadLocationRx/Fire
		!	LoadLocationRx/OnFire				OnLocation/Fire

	% ADTN: Load actual value is specified
	$	LoadValValRx Adt.Load { Key Value }
		!	LoadValRx/OnFire						LoadValValRx/Dictionary
		!	LoadValRx/OnFire						LoadValValRx/Fire
		!	LoadValValRx/OnFire					OnValue/Fire

	% MISCN: Demux verb
	$	DemuxVerb Misc.Demux { Key Verb Values ( Store Load Listen Unlisten ) }
		!	LoadValRx/OnFire						DemuxVerb/Dictionary
		!	LoadValRx/OnFire						DemuxVerb/Fire

	%%%%%%%
	% Load
	%%%%%%%

	%% TODO: Load

	%%%%%%%%
	% Store
	%%%%%%%%

	% NSPC: Store provided value into path
	$	StoreValue Nspc.This {}
		!	OnLocation/OnFire						StoreValue/Location
		!	OnValue/OnFire							StoreValue/Value
		!	DemuxVerb/OnStore						StoreValue/Store

	%%%%%%%%%
	% Listen
	%%%%%%%%%
	!	DemuxVerb/OnListen						Debug/Fire

	% ADTN: Load listen dictionay for path
	$	LoadListenDct Adt.Load {}
		!	CreateListensDct/OnFire				LoadListenDct/Dictionary
		!	OnLocation/OnFire						LoadListenDct/Key
		!	DemuxVerb/OnListen					LoadListenDct/Fire

	%% Listen dictionary does not exist yet, add it 

	% ADTN: Store listen dictionary under path
	$	StoreListenDct Adt.Store {}
		!	CreateListensDct/OnFire				StoreListenDct/Dictionary
		!	LoadListenDct/OnNotFound			StoreListenDct/Key

	% MISCN: Create client listen dictionary
	$	CreateListenDct Misc.Create { Id Adt.Dictionary }
		!	LoadListenDct/OnNotFound			CreateListenDct/Fire
		!	CreateListenDct/OnFire				StoreListenDct/Fire

	%% Obtain a receptor bound for the location for the client and associate client with it.

	% ADTN: Is client already listening to location ?
	$	LoadListenChk Adt.Load {}
		!	OnConnection/OnFire					LoadListenChk/Key
		!	LoadListenDct/OnFire					LoadListenChk/Dictionary

	% NSPC: Reflect location
	$	Reflect Nspc.Reflect {}
		!	OnLocation/OnFire						Reflect/Root
		!	LoadListenChk/OnNotFound			Reflect/Add
		!	Reflect/OnRoot							Debug/Fire
		!	Reflect/OnLocation					Debug/Fire
		!	Reflect/OnValue						Debug/Fire

	% ADTN: Store client connection as a listener to with receptor
	$	StoreListenConn Adt.Store {}
		!	LoadListenDct/OnFire					StoreListenConn/Dictionary
		!	CreateListenDct/OnFire				StoreListenConn/Dictionary
		!	OnConnection/OnFire					StoreListenConn/Key
		!	Reflect/OnAdd							StoreListenConn/Fire

	% Latent connection
	!	CreateListenDct/OnFire					Reflect/Add
	!	LoadListenDct/OnFire						LoadListenChk/Fire

	%%%%%%%%%%%
	% Unlisten
	%%%%%%%%%%%

	% ADTN: Load listen dictionary for path
	$	LoadUnlistenDct Adt.Load {}
		!	CreateListensDct/OnFire				LoadUnlistenDct/Dictionary
		!	OnLocation/OnFire						LoadUnlistenDct/Key
		!	DemuxVerb/OnUnlisten					LoadUnlistenDct/Fire

	% ADTN: Is client listening to location ?
	$	LoadUnlistenChk Adt.Load {}
		!	OnConnection/OnFire					LoadUnlistenChk/Key
		!	LoadUnlistenDct/OnFire				LoadUnlistenChk/Dictionary
	
	% If no listen dictionary is found for path then there is nothing to 'unlisten'.

	% ADTN: Remove specified client from listen dictionary
	$	RemoveUnlisten Adt.Remove {}
		!	OnConnection/OnFire					RemoveUnlisten/Key
		!	LoadUnlistenDct/OnFire				RemoveUnlisten/Container
		!	LoadUnlistenChk/OnFire				RemoveUnlisten/Fire

	% Detach receptor for client
	!	LoadUnlistenChk/OnFire					Reflect/Remove

	% Latent connections
	!	LoadUnlistenDct/OnFire					LoadUnlistenChk/Fire

	%% If there are no more clients listening to the location, remove location

	% ADTN: Count number of clients for path
	$	CountUnlisten Adt.Stat {}
		!	RemoveUnlisten/OnFire				CountUnlisten/Container
		!	RemoveUnlisten/OnFire				CountUnlisten/Fire

	% ADTN: If empty remove path from listens
	$	RemoveUnlistenPath Adt.Remove {}
		!	CreateListensDct/OnFire				RemoveUnlistenPath/Container
		!	OnLocation/OnFire						RemoveUnlistenPath/Key
		!	CountUnlisten/OnEmpty				RemoveUnlistenPath/Fire

	%%%%%%%%
	% Value
	%%%%%%%%

	%% Transmit values to listening clients.

	% MISCN: Create dictionary to store values
	$	CreateDctTx Misc.Create { Id Adt.Dictionary }
		!	Initialize/OnFire						CreateDctTx/Fire

	% MISCN: Create value dictionary
	$	CreateDctValTx Misc.Create { Id Adt.Dictionary }
		!	Initialize/OnFire						CreateDctValTx/Fire

	% ADTN: Store value dictionary in transmit dictionary
	$	StoreDctTx Adt.Store { Key Value }
		!	CreateDctTx/OnFire					StoreDctTx/Dictionary
		!	CreateDctValTx/OnFire				StoreDctTx/Fire

	% MISCN: Value verb
	$	ValueVerb Misc.Dist { Value Value }
		!	Initialize/OnFire						ValueVerb/Fire

	% ADTN: Load the clients listening to location
	$	LoadValueConns Adt.Load {}
		!	CreateListensDct/OnFire				LoadValueConns/Dictionary
		!	Reflect/OnRoot							LoadValueConns/Key

	% ADTN: Store information in dictionary
	$	StoreDctValTx Adt.Keys { Keys ( Verb Root Location Value ) }
		!	CreateDctValTx/OnFire				StoreDctValTx/Dictionary
		!	ValueVerb/OnFire						StoreDctValTx/Verb
		!	Reflect/OnRoot							StoreDctValTx/Root
		!	Reflect/OnLocation					StoreDctValTx/Location
		!	Reflect/OnValue						StoreDctValTx/Value
		!	LoadValueConns/OnFire				StoreDctValTx/Store
		!	StoreDctValTx/OnStore				Debug/Fire

	% ADTN: Iterate connections for root
	$	ListenConnIt Adt.Iterate {}
		!	LoadValueConns/OnFire				ListenConnIt/Container
		!	LoadValueConns/OnFire				ListenConnIt/First

	% ADTN: Store connection 
	$	StoreDctConnTx Adt.Store { Key Connection }
		!	CreateDctTx/OnFire					StoreDctConnTx/Dictionary
		!	ListenConnIt/OnKey					StoreDctConnTx/Fire

	% Transmit value
%	!	StoreDctConnTx/OnFire					Debug/Fire
	!	StoreDctConnTx/OnFire					Ws/State/Value/Fire

	% Next connection
	!	ListenConnIt/OnNext						ListenConnIt/Next

	% Latent connections
	!	Reflect/OnValue							LoadValueConns/Fire

	%%%%%%%%
	% Close
	%%%%%%%%

	% MISCN: Connection closed
%	$	OnClose Misc.Dist {}
%		!	Server/OnClose/OnFire				OnClose/Fire
		!	OnClose/OnFire							Debug/Fire

	% Active connection
	!	OnClose/OnFire								OnConnection/Fire

	%% Automatically shutdown any 'listens' the client may have

	% ADTN: Iterate existing listens
	$	CloseIt Adt.Iterate {}
		!	CreateListensDct/OnFire				CloseIt/Container

	% MISCN: Current location in case of unlisten
	$	ValueCloseLoc Misc.Dist {}
		!	CloseIt/OnKey							ValueCloseLoc/Value
		!	ValueCloseLoc/OnFire					OnLocation/Fire

	% ADTN: Is client listening to path ?
	$	LoadCloseChk Adt.Load {}
		!	OnClose/OnFire							LoadCloseChk/Key
		!	CloseIt/OnNext							LoadCloseChk/Dictionary
		!	CloseIt/OnNext							LoadCloseChk/Fire

	% Yes, client is listening, unlisten and restart iteration due to possible container changing
	!	LoadCloseChk/OnFire						ValueCloseLoc/Fire
	!	LoadCloseChk/OnFire						LoadUnlistenDct/Fire
	!	LoadCloseChk/OnFire						CloseIt/First

	% Not listening, check next path
	!	LoadCloseChk/OnNotFound					CloseIt/Next

	% Latent connections
	!	OnClose/OnFire								CloseIt/First
