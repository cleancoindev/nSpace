%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%										SYNC_VALUE_Q.NSPC
%
%	Synchronous value queue.  Value queueing can occur at any time, but value
%	dequeueing is synchronized with owner.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@

	% Context
	$	Maximum			Misc.Dist {}			% Maximum queue size (0 = no limit)
	$	Clone				Misc.Dist {}			% Signaled to clone values as they are queued

	% Actions
	$	Initialize		Misc.Dist {}			% Initialize graph
	$	Value				Misc.Dist {}			% Add a value to the queue
	$	Retry				Misc.Dist {}			% Re-emit latest value
	$	Next				Misc.Dist {}			% Return the next value
	$	Reset				Misc.Dist {}			% Reset/clear contents

	% Notifications
	$	OnValue			Misc.Dist {}			% A value is available
	$	OnEmpty			Misc.Dist {}			% Value queue empty
	$	OnFull			Misc.Dist {}			% Value queue full (if max)

	%%%%%%%%
	% Queue
	%%%%%%%%

	% CREATE: Create command queue on startup
	$	CreateValueQ Misc.Create { Id Adt.Queue }
		!	Initialize/OnFire						CreateValueQ/Fire 

	% WRITE: Write values to queue on arrival
	$	WriteValueQ Adt.Write {}
		!	CreateValueQ/OnFire					WriteValueQ/List

	% MISCN: Clone value and queue it
	$	CloneValue Misc.Clone {}

	% MISCN: Value to queue
	$	ValueQ Misc.Dist {}
		!	Value/OnFire							ValueQ/Value

	%% Queue

	% MISCN: True if values should be cloned on the way into the queue
	$	CloneBool Misc.Toggle { Default false:bool }
		!	ValueQ/OnFire							CloneBool/Fire
		!	Clone/OnFire							CloneBool/True

	% Queue value
	!	CloneBool/OnTrue							CloneValue/Fire
	!	CloneValue/OnFire							WriteValueQ/Fire
	!	CloneBool/OnFalse							WriteValueQ/Fire

	%% Count

	% MISCN: Maximum specified ?
	$	IsMax Misc.Compare { Left 0:int Right 0:int }
		!	Maximum/OnFire							IsMax/Right
		!	Value/OnFire							IsMax/Fire

	% ADTN: Obtain number of items in queue
	$	CountValueQ Adt.Stat {}
		!	CreateValueQ/OnFire					CountValueQ/Container
		!	IsMax/OnNotEqual						CountValueQ/Fire

	% MISCN: Room ?
	$	IsMore Misc.Compare { Left 0:int }
		!	Maximum/OnFire							IsMore/Left
		!	CountValueQ/OnCount					IsMore/Fire

	% Write value to queue
	!	IsMax/OnEqual								ValueQ/Fire
	!	IsMore/OnGreater							ValueQ/Fire

	% Full signal
	!	IsMore/OnEqual								OnFull/Fire
	!	IsMore/OnLess								OnFull/Fire

	%%%%%%%%%%
	% Extract
	%%%%%%%%%%

	% ADTN: Iterator for value queue
	$	ValueQIt Adt.Iterate {}
		!	CreateValueQ/OnFire					ValueQIt/Container
		!	ValueQIt/OnNext						OnValue/Fire

	% MISCN: True if last attempt to get a value failed.
	$	FirstToggle Misc.Toggle {}
		!	Initialize/OnFire						FirstToggle/True
		!	OnValue/OnFire							FirstToggle/False
		!	FirstToggle/OnTrue					ValueQIt/First

	% VALUE: Allows retry of last value
	$	RetryValue Misc.Dist {}
		!	OnValue/OnFire							RetryValue/Value
		!	Retry/OnFire							RetryValue/Fire
		!	RetryValue/OnFire						OnValue/Fire

	% If value queue is empty, enable first value gate
	!	ValueQIt/OnLast							FirstToggle/True
	!	ValueQIt/OnLast							OnEmpty/Fire

	% First value may need to be sent on new value
	!	Value/OnFire								FirstToggle/Fire

	% Latest value in queue
	!	Next/OnFire									ValueQIt/First

	% ADTN: For debug
	$	StatQ Adt.Stat {}
		!	CreateValueQ/OnFire					StatQ/Container
		!	Next/OnFire								StatQ/Fire

	% ADTN: Clear queue
	$	ResetValueQ Adt.Remove {}
		!	CreateValueQ/OnFire					ResetValueQ/Container
		!	Reset/OnFire							ResetValueQ/Clear

	% Next value will be first
	!	Reset/OnFire								FirstToggle/True
