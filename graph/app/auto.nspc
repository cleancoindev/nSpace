%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%								AUTO.NSPC
%
%					Debug 'auto start' graph instance
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@

	% Actions
	$	Initialize			Misc.Dist {}		% Initialize
	$	Uninitialize		Misc.Dist {}		% Uninitialize

	% DEBUG
	$	Debug Misc.Debug {}
		!	Initialize/OnFire						Debug/Fire
		!	Uninitialize/OnFire					Debug/Fire

	% NSPC: Local information
%	$	This Nspc.This {}
%		!	Initialize/OnFire						This/Fire

	%%%%%%%%
	% Setup
	%%%%%%%%

	% MISCN: Create file stream source
	$	CreateFileSrc Misc.Create { Id Io.StmSrcFile }
		!	Initialize/OnFire						CreateFileSrc/Fire

	% MATHN: Test counter
%	$	TestCnt Math.Counter { Reset 1:int }

	% MISCN: Create dictionary to receive information	
%	$	CreateImgDct Misc.Create { Id Adt.Dictionary }
%		!	TestCnt/OnFire							CreateImgDct/Fire
%		!	Initialize/OnFire						CreateImgDct/Fire

	% MISCN: Location of test image
%	$	ValueImgLoc Misc.Dist { Value "/Oct/Alazar_vs_SP/Alazar_Ethernet/Alignment/Raw/OCT_1.png" }
%	$	ValueImgLoc Misc.Dist { Value "/Oct/Alazar_vs_SP/Alazar_Ethernet/Alignment/FFT/OCT_1.png" }
%		!	TestCnt/OnFire							ValueImgLoc/Fire
%		!	Initialize/OnFire						ValueImgLoc/Fire

	% IMAGEN: Load test image
%	$	LoadPng Image.PersistImage {}
%		!	CreateImgDct/OnFire					LoadPng/Image
%		!	ValueImgLoc/OnFire					LoadPng/Location
%		!	ValueImgLoc/OnFire					LoadPng/Load
%		!	LoadPng/OnLoad							Debug/Fire

	%%%%%%%%%%%%%%
	% Web sockets
	%%%%%%%%%%%%%%

	% Subgraph: Remote namespace server
%	#	Server										Lib/Namespace/Remote/Inst/ {}

	% Subgraph: Interface elements
%	#	ButtonTest									State/Interface/Button/ {}
%		!	ButtonTest/Activate/OnFire			Debug/Fire
%	#	CheckboxTest								State/Interface/Button/ {}
%		!	CheckboxTest/Activate/OnFire		Debug/Fire
%	#	ListboxTest									State/Interface/List/ {}
%	#	EditTest										State/Interface/Edit/ {}
%		!	EditTest/Element/Default/OnFire	Debug/Fire
%	#	ImageTest									State/Interface/Image/ {}
%		!	ImageTest/Element/Default/OnFire	Debug/Fire

	% Subgraph: List management
%	#	IntfList										Lib/Interface/List/ {}
%		!	IntfList/OnIndex/OnFire				Debug/Fire
%		!	IntfList/OnValue/OnFire				Debug/Fire

	% MISCN: Link lists in state to list management
%	$	LinkIntfLocs Nspc.Link { Destination "./IntfList/State/"	Source "./ListboxTest/" }
%		!	Initialize/OnFire						LinkIntfLocs/Link

	% MISCN: Strings
%	$	ValueStrs Misc.Dist { Value ( You Can Byte Me Now ) }
%		!	Initialize/OnFire						ValueStrs/Fire

	% ADTN: Add strings
%	$	StrsIt Adt.Iterate {}
%		!	ValueStrs/OnFire						StrsIt/Container
%		!	ValueStrs/OnFire						StrsIt/First
%		!	StrsIt/OnNext							IntfList/Add/Fire
%		!	StrsIt/OnNext							StrsIt/Next

	% MISCN: Disable button
%	$	ValueDis Misc.Dist { Value false:bool }
%	$	ValueDis Misc.Dist { Value true:bool }
%		!	Initialize/OnFire						ValueDis/Fire
%		!	ValueDis/OnFire						ButtonTest/Element/Enable/Fire

	% MISCN: Checked/unchecked
%	$	ValueChk Misc.Dist { Value true:bool }
%		!	Initialize/OnFire						ValueChk/Fire
%		!	ValueChk/OnFire						CheckboxTest/Activate/Fire
%	$	ValueUnchk Misc.Dist { Value false:bool }
%		!	Initialize/OnFire						ValueUnchk/Fire
%		!	ValueUnchk/OnFire						CheckboxTest/Activate/Fire

	%% Image

	% MISCN: Create a dictionary for the image
%	$	CreateImgDct Misc.Create { Id Adt.Dictionary }
%		!	Initialize/OnFire						CreateImgDct/Fire

	% MISCN: Image location
%	$	ValueImgLoc Misc.Dist { Value "c:/temp/background.png" }
%		!	Initialize/OnFire						ValueImgLoc/Fire
%		!	ValueImgLoc/OnFire					Debug/Fire

	% IMAGEN: Load image
%	$	LoadImage Image.PersistImage {}
%		!	CreateImgDct/OnFire					LoadImage/Image
%		!	ValueImgLoc/OnFire					LoadImage/Location
%		!	ValueImgLoc/OnFire					LoadImage/Load

	% Load into value
%	!	LoadImage/OnLoad							Debug/Fire
%	!	LoadImage/OnLoad							Debug/Fire

	%%%%%

	% MISCN: Listening port
%	$	ValuePort Misc.Dist { Value 8443:int }
%		!	Initialize/OnFire						ValuePort/Fire

	% Subgraph: Web socket server
%	#	Server										Lib/Comm/Network/Ip/Tcp/Http/Ws/Server/ {}
%		!	ValuePort/OnFire						Server/PortSrvr/Fire

	% MISCN: Create parser for XML
%	$	CreatePrsrXml Misc.Create { Id IO.StmPrsXML }
%		!	Initialize/OnFire						CreatePrsrXml/Fire

	% MISCN: Persist value from stream
%	$	StmToVal Io.Persist {}
%		!	CreatePrsrXml/OnFire					StmToVal/Parser
%		!	Server/OnReceive/OnFire				StmToVal/Stream
%		!	Server/OnReceive/OnFire				StmToVal/Load
%		!	StmToVal/OnLoad						Debug/Fire

	%% Response

	% MISCN: Create byte stream to receive data
%	$	CreateStm Misc.Create { Id Io.StmMemory }
%		!	Initialize/OnFire						CreateStm/Fire

	% ION: Reset size/position of outgoing stream
%	$	StmPos Io.StreamOp { Origin Set Offset 0:int }
%		!	CreateStm/OnFire						StmPos/Stream

	% Echo
%	!	Server/OnClient/OnFire					Server/Client/Fire

	% MISCN: Response value
%	$	ValueResp Misc.Dist { Value { You Can Byte Me Now 3.14159265358979323:double } }
%	$	ValueResp Misc.Dist { Value ( You 3.14159265358979323:double ) }
%		!	ValueResp/OnFire						Debug/Fire

	% MISCN: Persist value to stream
%	$	ValToStm Io.Persist {}
%		!	CreatePrsrXml/OnFire					ValToStm/Parser
%		!	CreateStm/OnFire						ValToStm/Stream
%		!	ValueResp/OnFire						ValToStm/Value
%		!	ValueResp/OnFire						ValToStm/Save
%		!	ValToStm/OnSave						Debug/Fire

	% Persist response to stream
%	!	StmToVal/OnLoad							ValueResp/Fire

	% Reset position, send response, and reset size for next time
%	!	ValToStm/OnSave							StmPos/Seek
%	!	ValToStm/OnSave							Server/Transmit/Fire

	% MISCN: Respond
%	$	Value

	% MISCN: Listening port
%	$	ValuePort Misc.Dist { Value 8443:int }
%		!	Initialize/OnFire						ValuePort/Fire

	% Subgraph: Server / clients
%	#	Server										Lib/Comm/Network/Ip/Tcp/ServerClients/ {}
%		!	ValuePort/OnFire						Server/PortSrvr/Fire
%		!	Initialize/OnFire						Server/Start/Fire
%		!	Uninitialize/OnFire					Server/Stop/Fire
%		!	Server/OnConnect/OnFire				Debug/Fire
%		!	Server/OnRead/OnFire					Debug/Fire

	% NETN: Read data
%	$	NetRx Net.Recv {}
%		!	Server/OnRead/OnFire					NetRx/Socket
%		!	NetRx/OnFire							Debug/Fire
%		!	NetRx/Error								Debug/Fire

	% On read error, close socket
%	!	NetRx/OnError								Server/Close/Fire

	% MISCN: Create stream to receive data
%	$	CreateStmRx Misc.Create { Id IO.StmMemory }
%		!	Server/OnRead/OnFire					CreateStmRx/Fire

	% Trigger read
%	!	CreateStmRx/OnFire						NetRx/Stream
%	!	CreateStmRx/OnFire						NetRx/Fire

	%%%%%%%%%%
	% General
	%%%%%%%%%%

	% MATHN: Counter
%	$	Cnt Math.Counter { Reset 0:int }
%		!	Initialize/OnFire						Cnt/Reset
%		!	Cnt/OnFire								Debug/Fire

	% MISCN: Done ?
%	$	MoreCnt Misc.Compare { Left 16384:int }
%		!	Cnt/OnFire								MoreCnt/Fire
%		!	MoreCnt/OnGreater						Cnt/Increment
%		!	MoreCnt/OnEqual						Debug/Fire
%		!	MoreCnt/OnEqual						Debug/Fire
%		!	MoreCnt/OnEqual						Debug/Fire
%		!	MoreCnt/OnEqual						Debug/Fire

	%%%%%%%%%%%%%%%%%%%%%%
	% Device notification
	%%%%%%%%%%%%%%%%%%%%%%

	% Subgraph: Device manager
%	#	Manager										Driver/Device/Manager/Inst/ {}

	% ION: Device notification
%	$	NotifyDevs Io.NotifyDevices {}
%		!	Initialize/OnFire						NotifyDevs/Start
%		!	Uninitialize/OnFire					NotifyDevs/Stop
%		!	NotifyDevs/OnFire						Debug/Fire

	%%%%%%
	% SQL
	%%%%%%

	% MISCN: Create a dictionary to receive results
%	$	CreateRowDct Misc.Create { Id Adt.Dictionary }
%		!	Initialize/OnFire						CreateRowDct/Fire

	% SQLN: Open connection
%	$	Conn Sql.Connection { Location "d:/dev/catseyegui/trunk/catseyeDb.db3" }
%		!	Initialize/OnFire						Conn/Fire

	% SQLN: Query
%	$	Query Sql.Query { Table OPERATORS }
%		!	Conn/OnFire								Query/Connection
%		!	Conn/OnFire								Query/Fire

	% SQLN: Enumerator
%	$	Enum Sql.RecordEnum {}
%		!	CreateRowDct/OnFire					Enum/Dictionary
%		!	Query/OnFire							Enum/Statement
%		!	Query/OnFire							Enum/Next
%		!	Enum/OnNext								Debug/Fire
%		!	Enum/OnNext								Enum/Next

	%%%%%%%%%%%%%%%%%%%%%%%
	% Image processing/GPU
	%%%%%%%%%%%%%%%%%%%%%%%

	% MISCN: Create a dictionary for the image
%	$	CreateImgDct Misc.Create { Id Adt.Dictionary }
%		!	Initialize/OnFire						CreateImgDct/Fire

	% MISCN: Image location
%	$	ValueImgLoc Misc.Dist { Value "c:/temp/template.png" }
%	$	ValueImgLoc Misc.Dist { Value "c:/temp/OCT_1.png" }
%	$	ValueImgLoc Misc.Dist { Value "c:/temp/Catseye_Study_1029_151002090209_OD_VISX_SI.bmp" }
%	$	ValueImgLoc Misc.Dist { Value "c:/temp/blank.png" }
%	$	ValueImgLoc Misc.Dist { Value "c:/temp/pupil_nir_half.png" }
%		!	Initialize/OnFire						ValueImgLoc/Fire
%		!	ValueImgLoc/OnFire					Debug/Fire

	% IMAGEN: Load image
%	$	LoadImage Image.PersistImage {}
%		!	CreateImgDct/OnFire					LoadImage/Image
%		!	ValueImgLoc/OnFire					LoadImage/Location
%		!	ValueImgLoc/OnFire					LoadImage/Load

	% Execute
%	!	LoadImage/OnLoad							Debug/Fire

	%% OCT testing

	% MISCN: Defaults
%	$	ValueMin Misc.Dist { Value 0:float }
%%	$	ValueMin Misc.Dist { Value -15:float }
%		!	LoadImage/OnLoad						ValueMin/Fire
%	$	ValueMax Misc.Dist { Value 150:float }
%%	$	ValueMax Misc.Dist { Value 50:float }
%		!	LoadImage/OnLoad						ValueMax/Fire

	%% Test image is old format

	% IMAGEN: Upload from dictionary into image processing logic
%	$	Prepare Image.Prepare {}
%		!	LoadImage/OnLoad						Prepare/Image
%		!	LoadImage/OnLoad						Prepare/Upload

	% MATHN: Divide down to 12 bits
%	$	OctDiv Image.Binary { Right 16:int Op Div }
%		!	Prepare/OnUpload						OctDiv/Left
%		!	Prepare/OnUpload						OctDiv/Fire

	% IMAGEN: To signed 16-bit
%	$	OctSign Image.Convert { Format "S16x2" }
%		!	OctDiv/OnFire							OctSign/Fire

	% MATHN: Signed 16-bit
%	$	OctSub Image.Binary { Right 2048:int Op Sub }
%		!	OctSign/OnFire							OctSub/Left
%		!	OctSign/OnFire							OctSub/Fire

	% Download image back into buffer
%	!	Prepare/OnUpload							Prepare/Download

	% MISCN: Clone image (conversion destructive)
%	$	CloneImage Misc.Clone {}
%		!	LoadImage/OnLoad						CloneImage/Value

	% Subgraph: Perform OCT conversion
%	#	ToMag											Abbott/Lib/Oct/RawToMag/ {}
%		!	CloneImage/OnFire						ToMag/Image/Fire
%		!	CloneImage/OnFire						ToMag/Convert/Fire
%		!	ValueMin/OnFire						ToMag/Minimum/Fire
%		!	ValueMax/OnFire						ToMag/Maximum/Fire

	% Multiple times
%	!	LoadImage/OnLoad							CloneImage/Fire
%	!	LoadImage/OnLoad							CloneImage/Fire
%	!	LoadImage/OnLoad							CloneImage/Fire
%	!	LoadImage/OnLoad							CloneImage/Fire

	%% GPU testing

	% IMAGEN: Upload from dictionary into image processing logic
%	$	Prepare Image.Prepare {}
%		!	LoadImage/OnLoad						Prepare/Upload
%		!	Prepare/OnUpload						Debug/Fire

	% IMAGEN: Draw circle
%	$	Circle Image.Draw { X0 320:int Y0 240:int Shape Circle Color 0xffffff:int Thickness -1:int Radius 10:int }
%		!	Prepare/OnUpload						Circle/Fire

	% Download image for saving
%	!	Prepare/OnUpload							Prepare/Download
%	!	Prepare/OnDownload						Debug/Fire

	% IMAGEN: Save result
%	$	SaveImage Image.PersistImage { Location "c:/temp/debug.png" }
%		!	Prepare/OnDownload					SaveImage/Image
%		!	Prepare/OnDownload					SaveImage/Save
%		!	ToMag/OnImage/OnFire					SaveImage/Image
%		!	ToMag/OnImage/OnFire					SaveImage/Save

	%% Merge

	% MISCN: Save location
%	$	ValueImgSv Misc.Dist { Value "c:/temp/composite.png" }
%		!	Initialize/OnFire						ValueImgSv/Fire

	% MISCN: Location with images
%	$	ValueImgLoc Misc.Dist { Value "c:/temp/images/" }
%		!	Initialize/OnFire						ValueImgLoc/Fire

	% ION: Iterate contents of location
%	$	LocsIt Io.StreamSource {}
%		!	CreateFileSrc/OnFire					LocsIt/Source
%		!	ValueImgLoc/OnFire					LocsIt/Location
%		!	LocsIt/OnNext							Debug/Fire

	% MATHN: Generate full path to image
%	$	AppendLoc Math.Binary { Left "" }
%		!	ValueImgLoc/OnFire					AppendLoc/Left
%		!	LocsIt/OnNext							AppendLoc/Right
%		!	LocsIt/OnNext							AppendLoc/Fire

	% MISCN: Create a dictionary for the image
%	$	CreateImgDct Misc.Create { Id Adt.Dictionary }
%		!	AppendLoc/OnFire						CreateImgDct/Fire

	% IMAGEN: Load image
%	$	LoadImage Image.PersistImage {}
%		!	CreateImgDct/OnFire					LoadImage/Image
%		!	AppendLoc/OnFire						LoadImage/Location
%		!	AppendLoc/OnFire						LoadImage/Load
%		!	LoadImage/OnLoad						Debug/Fire

	% IMAGEN: Prepare image for use
%	$	Prepare Image.Prepare {}
%		!	LoadImage/OnLoad						Prepare/Upload

	% MISCN: First image
%	$	FirstBool Misc.Toggle {}
%		!	ValueImgLoc/OnFire					FirstBool/True
%		!	FirstBool/OnTrue						FirstBool/False
%		!	Prepare/OnUpload						FirstBool/Fire

	% MISCN: Result image
%	$	ValueResult Misc.Dist {}
%		!	FirstBool/OnTrue						ValueResult/Value

	% MATHN: Combine images
%	$	ImageOr Image.Binary { Op Or }
%		!	ValueResult/OnFire					ImageOr/Left
%		!	ValueResult/OnFire					ImageOr/Fire

	% Or in next image
%	!	FirstBool/OnFalse							ImageOr/Right
%	!	FirstBool/OnFalse							ValueResult/Fire

	% First/next location
%	!	ValueImgLoc/OnFire						LocsIt/First
%	!	LocsIt/OnNext								LocsIt/Next

	% IMAGEN: Download result
%	$	Download Image.Prepare {}
%		!	FirstBool/OnTrue						Download/Image
%		!	LocsIt/OnEnd							Download/Download

	% IMAGEN: Save result
%	$	SaveImage Image.PersistImage {}
%		!	ValueImgSv/OnFire						SaveImage/Location
%		!	Download/OnDownload					SaveImage/Image
%		!	Download/OnDownload					SaveImage/Save

	%%

	% IMAGEN: Upload from dictionary into image processing logic
%	$	Prepare Image.Prepare {}
%		!	LoadPng/OnLoad							Prepare/Upload

	% Result is the downloaded version
%	!	Prepare/OnDownload						Debug/Reset
%	!	Prepare/OnDownload						Debug/Fire

	% IMAGEN: Convert to 32-bit floating point for subsequent operations
%	$	ToFlt Image.Convert { Format "F32x2" }
%		!	Prepare/OnUpload						ToFlt/Fire

	% IMAGEN: Perform FFT/magnitude calculation
%	$	FFT Image.FFT { ZeroDC true:bool Window "Blackman-Nutall" }
%		!	ToFlt/OnFire							FFT/Fire
%		!	FFT/OnFire								Debug/Fire

	% IMAGEN: Threshold upper and lower limits of spectrum
%	$	ThreshHigh Image.Threshold { Value 50:float Op Truncate }
%		!	FFT/OnFire								ThreshHigh/Fire
%	$	ThreshLow Image.Threshold { Value 15:float Op Zero }
%		!	ThreshHigh/OnFire						ThreshLow/Fire

	% IMAGEN: Use full scale of eventual 2 bytes per pixel
%	$	Normalize Image.Normalize { From 0:int To 0xffff:int }
%		!	ThreshLow/OnFire						Normalize/Fire

	% IMAGEN: Convert to a U16x2 image
%	$	ToInt Image.Convert { Format "U16x2" }
%		!	Normalize/OnFire						ToInt/Fire

	% Download from image processing logic into image
%	!	ToInt/OnFire								Prepare/Download

	% IMAGEN: Save test image
%	$	SavePng Image.PersistImage { Location "c:/temp/test.png" }
%		!	Prepare/OnDownload					SavePng/Image
%		!	Prepare/OnDownload					SavePng/Save
%		!	SavePng/OnSave							Debug/Fire

	% Clean up
%	!	Prepare/OnDownload						Debug/Mark
%	!	Prepare/OnDownload						Prepare/Release

	%%%%%%%%%%%
	% Plotting
	%%%%%%%%%%%

	%% Plot

	% PLOTN: Image plot generation
%	$	Plot Plot.Image { Title "This is a test plot" LabelX0 "A-Scan" LabelY0 "Intensity" }
%		!	LoadPng/OnLoad							Plot/Reset

	%% X-axis

	% ADTN: Load width of incoming image
%	$	LoadImgW Adt.Load { Key Width }
%		!	LoadPng/OnLoad							LoadImgW/Dictionary
%		!	LoadPng/OnLoad							LoadImgW/Fire
%		!	LoadImgW/OnFire						Debug/Fire

	%% X-axis values will just be the column number

	% MISCN: Create list
%	$	CreateListX Misc.Create { Id Adt.List }
%		!	LoadImgW/OnFire						CreateListX/Fire
%		!	CreateListX/OnFire					Plot/Data

	% MATHN: X-counter
%	$	CntX Math.Counter { Reset 1:int }
%		!	CntX/OnFire								Debug/Fire

	% ADTN: Write counter value to list
%	$	WriteListX Adt.Write {}
%		!	CreateListX/OnFire					WriteListX/List
%		!	CntX/OnFire								WriteListX/Fire

	% MISCN: More ?
%	$	MoreX Misc.Compare { Left 0:int }
%		!	LoadImgW/OnFire						MoreX/Left
%		!	CntX/OnFire								MoreX/Fire

	% X counter
%	!	LoadImgW/OnFire							CntX/Reset
%	!	MoreX/OnGreater							CntX/Increment

	% MISCN: First row
%	$	ValueIdxZero Misc.Dist { Value 0:int }
%		!	MoreX/OnEqual							ValueIdxZero/Fire
%		!	ValueIdxZero/OnFire					Plot/Index

	% Add row
%	!	MoreX/OnEqual								Plot/Add

	%% Y-axis

	% MISCN: Selected row
%	$	ValueIdxRow Misc.Dist { Value 250:int }
%		!	LoadPng/OnLoad							ValueIdxRow/Fire
%		!	ValueIdxRow/OnFire					Plot/Index

	% Add row
%	!	LoadPng/OnLoad								Plot/Data
%	!	LoadPng/OnLoad								Plot/Add

	% Generate plot
%	!	LoadPng/OnLoad								Plot/Fire
%	!	Plot/OnFire									Debug/Fire

	% IMAGEN: Write to debug file
%	$	SavePlot Image.PersistImage { Location "c:\\temp\\plot.png" }
%		!	Plot/OnFire								SavePlot/Image
%		!	Plot/OnFire								SavePlot/Save

	% MISCN: More testing ?
%	$	TestMode Misc.Compare { Left 1000:int }
%		!	TestCnt/OnFire							TestMode/Fire

	% Testing
%	!	Initialize/OnFire							TestCnt/Reset
%	!	TestMode/OnGreater						TestCnt/Increment

	%%%%%%%%%%%%%
	% Queue test
	%%%%%%%%%%%%%

	% MISCN: Async queue testing
%	$	TestQ Misc.AsyncQ { Size 1000:int Block true:bool }
%		!	Initialize/OnFire						TestQ/Start
%		!	Uninitialize/OnFire					TestQ/Stop
%		!	TestQ/OnFire							Debug/Fire

	% MISCN: Add numbers to queue
%	$	CntQ Math.Counter { Reset 1:int }
%		!	Initialize/OnFire						CntQ/Reset
%		!	CntQ/OnFire								Debug/Fire

	% Queue numbers
%	!	CntQ/OnFire									TestQ/Fire

	% MISCN: More ?
%	$	MoreQ Misc.Compare { Left 100:int }
%		!	CntQ/OnFire								MoreQ/Fire
%		!	MoreQ/OnGreater						CntQ/Increment

	%%%%%%%%%%%%%%
	% Enumeration
	%%%%%%%%%%%%%%

	% Subgraph: Enumeration
%	#	Enum											Lib/Comm/Usb/Enum/ {}
%		!	Initialize/OnFire						Enum/Start/Fire
%		!	Uninitialize/OnFire					Enum/Stop/Fire
%		!	Enum/OnNext/OnFire					Debug/Fire
%		!	Enum/OnNext/OnFire					Enum/Next/Fire
%		!	Enum/OnEnd/OnFire						Debug/Fire

	%%%%%%%%%%%%%%
	% USB Raw I/O
	%%%%%%%%%%%%%%

	% Subgraph: USB Raw I/O
%	#	Raw											Lib/Comm/Usb/Raw/ {}
%		!	Raw/State/OnStatus/OnFire			Debug/Fire
%		!	Raw/State/OnRead/OnFire				Debug/Fire

	% MISCN: Device under test
%	$	ValueClassId Misc.Dist { Value "{58D07210-27C1-11DD-BD0B-0800200c9a66}" }
%		!	Initialize/OnFire						ValueClassId/Fire
%		!	ValueClassId/OnFire					Raw/State/ClassId/Fire
%	$	ValueVendorId Misc.Dist { Value 0x03eb:int }
%		!	Initialize/OnFire						ValueVendorId/Fire
%		!	ValueVendorId/OnFire					Raw/State/VendorId/Fire
%	$	ValueProductId Misc.Dist { Value 0xf000:int }
%		!	Initialize/OnFire						ValueProductId/Fire
%		!	ValueProductId/OnFire				Raw/State/ProductId/Fire

	% MISCN: Start test
%	$	ValueStart Misc.Dist { Value Start }
%		!	Initialize/OnFire						ValueStart/Fire
%		!	ValueStart/OnFire						Raw/State/Run/Fire

	% MISCN: Write test string
%	$	ValueWr Misc.Dist { Value "00" }
%		!	Initialize/OnFire						ValueWr/Fire
%		!	ValueWr/OnFire							Raw/State/Write/Fire

	% MISCN: Shutdown on read
%	$	ValueStop Misc.Dist { Value Stop }
%		!	Raw/State/OnRead/OnFire				ValueStop/Fire
%		!	ValueStop/OnFire						Debug/Fire
%		!	ValueStop/OnFire						Debug/Fire
%		!	ValueStop/OnFire						Raw/State/Run/Fire

	%%%%%%%%%%%%%%
	% Enumeration
	%%%%%%%%%%%%%%

	%% USB

	% MISCN: Create file stream source
%	$	CreateFileSrc Misc.Create { Id Io.StmSrcFile }
%		!	Initialize/OnFire						CreateFileSrc/Fire

	% ION: Enumerate devices (USB Device class)
%	$	EnumDev Io.EnumDevices { Class "{A5DCBF10-6530-11D2-901F-00C04FB951ED}" }
%		!	Initialize/OnFire						EnumDev/First
%		!	EnumDev/OnNext							Debug/Fire
%		!	EnumDev/OnName							Debug/Fire

	% ION: Access an asynchronous stream for the device path
%	$	DevStmSrc Io.StreamSource { Options { ReadOnly true:bool Async true:bool } }
%		!	CreateFileSrc/OnFire					DevStmSrc/Source
%		!	EnumDev/OnNext							DevStmSrc/Location
%		!	EnumDev/OnNext							DevStmSrc/Open

	% USBN: Retrieve information about the device
%	$	InfoDev Usb.Device {}
%		!	DevStmSrc/OnOpen						InfoDev/Stream
%		!	DevStmSrc/OnOpen						InfoDev/Open
%		!	InfoDev/OnDevice						Debug/Fire

	% MISCN: Ensure previous device is closed
%	$	CloseDev Io.Resource {}
%		!	DevStmSrc/OnOpen						CloseDev/Resource

	% Clean up
%	!	DevStmSrc/OnOpen							InfoDev/Close
%	!	DevStmSrc/OnOpen							CloseDev/Close

	%% SP devices

	% SPDN: Enumerate devices
%	$	Enum Abbott.Spd.Enum {}
%		!	Initialize/OnFire						Enum/First
%		!	Enum/OnNext								Debug/Fire
%		!	Enum/OnEnd								Debug/Fire

	% MISCN: Create enumeration context for the unit
%	$	CreateEnumDct Misc.Create { Id Adt.Dictionary }
%		!	Enum/OnNext								CreateEnumDct/Fire

	% ADTN: Store the definition needed for the instance
%	$	StoreEnumDef Adt.Store { Key Definition Value "Abbott/Driver/Oct/Spd/Inst/" }
%		!	CreateEnumDct/OnFire					StoreEnumDef/Dictionary
%		!	CreateEnumDct/OnFire					StoreEnumDef/Fire

	% ADTN: Device type
%	$	StoreEnumType Adt.Store { Key Type Value Oct }
%		!	CreateEnumDct/OnFire					StoreEnumType/Dictionary
%		!	CreateEnumDct/OnFire					StoreEnumType/Fire

	% MISCN: Create a state context for the unit
%	$	CreateStateDct Misc.Create { Id Adt.Dictionary }
%		!	Enum/OnNext								CreateStateDct/Fire

	% ADTN: Store state context in enumeration
%	$	StoreStateDct Adt.Store { Key State }
%		!	CreateEnumDct/OnFire					StoreStateDct/Dictionary
%		!	CreateStateDct/OnFire				StoreStateDct/Fire

	% ADTN: Load the relevant parameters from the information
%	$	LoadEnumIdx Adt.Load { Key Index }
%		!	Enum/OnNext								LoadEnumIdx/Dictionary
%		!	Enum/OnNext								LoadEnumIdx/Fire

	% ADTN: Store value in enumeration dictionary
%	$	StoreEnum Adt.Store { Key "State/Index" }
%		!	CreateStateDct/OnFire				StoreEnum/Dictionary
%		!	LoadEnumIdx/OnFire					StoreEnum/Fire
%		!	StoreEnum/OnFire						Debug/Fire

	% This is a test

	% Next device
%	!	Enum/OnNext									Enum/Next
%	!	EnumDev/OnNext								EnumDev/Next

	%%%%%
	% UI
	%%%%%

	% UIN: