%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%								CAMERA.NSPC
%
%				Camera streaming demonstration
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@

	% Actions
	$	Initialize			Misc.Dist {}		% Initialize
	$	Uninitialize		Misc.Dist {}		% Uninitialize

	% DEBUG
	$	Debug Misc.Debug {}
		!	Initialize/OnFire						Debug/Fire
		!	Uninitialize/OnFire					Debug/Fire

	%%%%%%%%
	% Setup
	%%%%%%%%

	% MISCN: Create file stream source
	$	CreateFileSrc Misc.Create { Id Io.StmSrcFile }
		!	Initialize/OnFire						CreateFileSrc/Fire

	%%%%%%%%%%%%
	% Interface
	%%%%%%%%%%%%

	% Subgraph: Enable/disable streaming
	#	Enable										State/Interface/Button/ {}

	% Subgraph: Output image for display (Compressed vs Raw)
	#	OnImage										State/Interface/Value/ {}
	#	OnImageRaw									State/Interface/Value/ {}

	%%%%%%%%
	% Logic
	%%%%%%%%

	% MISCN: True/false
	$	CaptureEn Misc.Compare { Left true:bool }
		!	Enable/Activate/OnFire				CaptureEn/Fire

	% MISCN: Create dictionary for image
	$	CreateImageDct Misc.Create { Id Adt.Dictionary }
		!	Initialize/OnFire						CreateImageDct/Fire

	% IMAGEN: Video capture
	$	Capture Image.VideoCapture {}
		!	CreateImageDct/OnFire				Capture/Image
		!	CaptureEn/OnEqual						Capture/Open

	% MISCN: Capture timer
	$	Timer Misc.Timer { Rate 500:int }
		!	Capture/OnOpen							Timer/Start
		!	CaptureEn/OnNotEqual					Timer/Stop
		!	CaptureEn/OnNotEqual					Capture/Close

	% Grab frame
	!	Timer/OnFire								Debug/Fire
	!	Timer/OnFire								Capture/Fire

	% MISCN: NOTE: Not very portable, better way to handle this ? Need RGB for JPEG.
	$	ToRgb Image.Convert { Format "R8G8B8" }
		!	Capture/OnFire							ToRgb/Color

	% MISCN: Download for local use
	$	Prepare Image.Prepare {}
		!	ToRgb/OnFire							Prepare/Download

	% MISCN: Create a copy for processing
	$	CloneImage Misc.Clone {}
		!	Prepare/OnDownload					CloneImage/Fire

	%%

	% MISCN: Split analysis into own asynchronous path to free up signaler
	$	OnImageAsync Misc.AsyncEmit {}
		!	CloneImage/OnFire						OnImageAsync/Fire

	% Uncompressed version for interested parties
	!	OnImageAsync/OnFire						OnImageRaw/Element/Default/Fire

	%% Compression.  Some clients do not need the raw data

	% MISCN: Create a copy for compression
	$	CloneEncode Misc.Clone {}
		!	OnImageAsync/OnFire					CloneEncode/Fire

	% IMAGEN: Compress the image for distribution to listeners
	$	Compress Image.Codec { Type JPEG }
		!	CloneEncode/OnFire					Compress/Encode

	% Image data available
	!	Compress/OnEncode							OnImage/Element/Default/Fire

